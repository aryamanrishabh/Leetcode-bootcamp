class Solution {
    public boolean sContains(String s1, String s2){
        HashMap<Character, Integer> map1 = new HashMap<>();
        HashMap<Character, Integer> map2 = new HashMap<>();

        for(int i=0; i<s1.length(); i++){
            char c = s1.charAt(i);

            if(map1.containsKey(c)){
                map1.put(c, map1.get(c)+1);
            } else map1.put(c, 1);
        }

        for(int j=0; j<s2.length(); j++){
            char c = s2.charAt(j);

            if(map2.containsKey(c)){
                map2.put(c, map2.get(c)+1);
            } else map2.put(c, 1);
        }

        for(int k=0; k<s2.length(); k++){
            char c = s2.charAt(k);

            if(map1.containsKey(c) && map2.containsKey(c)){
                if(map1.get(c) < map2.get(c)) return false;
            }
        }

        return true;
    }

    public String minWindow(String s, String t) {
        if(t.length() > s.length()) return "";

        for(int i=t.length(); i<=s.length(); i++){
            int windowLen = i;
            StringBuilder sb = new StringBuilder();

            sb.append(s.substring(0, windowLen));

            if(sContains(sb.toString(), t)){
                return sb.toString();
            }

            for(int j=windowLen; j<s.length(); j++){
                sb.deleteCharAt(0);
                sb.append(Character.toString(s.charAt(j)));

                if(sContains(sb.toString(), t)){
                    return sb.toString();
                }
            }
        }

        return "";
    }
}
